extern crate rust_htslib;
use rust_htslib::bam;
use rust_htslib::prelude::*;

extern crate bio;

use std::env;
use std::str;

mod util;

fn main() {
    let args: Vec<String> = env::args().collect();

    match args.len() {
        3 => huh(&args[1], &args[2], &mut std::io::stdout()),
        _ => print_help()
    }
}

fn print_help(){
    println!("Usage:");
    println!("");
    println!(" nons <reference_fasta> <aligned_reads.bam>");
    println!("");
}



fn huh<T: std::io::Write>(reference_fasta_path: &str, indexed_bam_file_path: &str, mut stream: &mut T){
    // println!("fasta: {}", reference_fasta_path);
    // println!("bam: {}", indexed_bam_file_path);
    let contig_to_seq = util::read_fasta(reference_fasta_path);
    let bam = bam::Reader::from_path(indexed_bam_file_path).unwrap();

    // pileup over all covered sites
    let mut last_tid: u32 = u32::max_value();
    let mut tid: u32;
    let mut ref_iterator = "".chars();
    let mut last_ref_position = 0;
    for p in bam.pileup() {
        let pileup = p.unwrap();
        let mut counts: [u32; 256] = [0; 256];
        tid = pileup.tid();
        if tid != last_tid {
            // first contig or moved onto next contig
            if last_tid == u32::max_value() {
                last_tid = 0;
                if tid > 0 {
                    let contig_name = str::from_utf8(
                        bam.header().target_names()[0]
                    ).unwrap();
                    // Write out contigs that have no reads mapped to them
                    writeln!(stream, ">{}", contig_name).unwrap();
                    writeln!(stream, "{}", contig_to_seq[contig_name]).unwrap();
                    last_tid += 1;
                }
            } else {
                writeln!(stream, "{}", ref_iterator.as_str()).unwrap();
                last_ref_position = 0;
            }
            //println!("last tid {} tid {}", last_tid, tid);
            assert!(tid >= last_tid, "bam file appears to be unsorted"); // some (unsorted) bam files aren't in order of TIDs, this isn't handled.

            while last_tid+1 < tid {
                let contig_name = str::from_utf8(
                    bam.header().target_names()[(last_tid+1) as usize]
                ).unwrap();
                // Write out contigs that have no reads mapped to them
                writeln!(stream, ">{}", contig_name).unwrap();
                writeln!(stream, "{}", contig_to_seq[contig_name]).unwrap();
                last_tid += 1;
            }

            let contig_name = str::from_utf8(
                bam.header().target_names()[pileup.tid() as usize]
            ).unwrap();
            //println!("New contig name {} {} from {:?}", contig_name, pileup.tid(), bam.header().target_names());
            writeln!(&mut stream, ">{}", contig_name).unwrap();
            last_tid = tid;
            ref_iterator = contig_to_seq[contig_name].chars();
        }
        while last_ref_position < pileup.pos() {
            write!(&mut stream, "{}", ref_iterator.next().unwrap()).unwrap();
            last_ref_position += 1;
        }
        last_ref_position += 1;
        let ref_base = ref_iterator.next().unwrap();
        //println!("{}:{} depth {} ref base {}", pileup.tid(), pileup.pos(), pileup.depth(), ref_base);
        if ref_base == 'N' {
            for alignment in pileup.alignments() {
                match alignment.qpos() {
                    Some(qpos) => {
                        let base: u8 = alignment.record().seq()[qpos];
                        counts[base as usize] += 1;
                    }
                    None => {} // ignore indels for the moment.
                }
            }
            {
                let mut max_count = 0;
                let mut max_base: char = '?';
                for (i, count) in counts.iter().enumerate() {
                    if *count > max_count {
                        max_count = *count;
                        max_base = char::from(i as u8);
                    }
                }
                write!(&mut stream, "{}",max_base).unwrap();
            }
        } else {
            write!(&mut stream, "{}",ref_base).unwrap();
        }
    }
    // write missing end part of last piled contig
    writeln!(stream, "{}", ref_iterator.as_str()).unwrap();
    // write out contigs at end with no aligned reads
    let num_references = bam.header().target_count();
    last_tid += 1;
    while last_tid < num_references {
        let contig_name = str::from_utf8(
            bam.header().target_names()[last_tid as usize]
        ).unwrap();
        // Write out contigs that have no reads mapped to them
        writeln!(stream, ">{}", contig_name).unwrap();
        writeln!(stream, "{}", contig_to_seq[contig_name]).unwrap();
        last_tid += 1;
    }

}

#[cfg(test)]
mod tests {
    use super::*;
    use std::io::Cursor;

    #[test]
    fn test_no_n(){
        let mut stream = Cursor::new(Vec::new());
        huh("test-data/random500.fna",
            "test-data/random500.random500.reads.bam",
            &mut stream);
        assert_eq!(
            ">random_sequence_length_500
ACAACTGTCCCACAGAGGAATTTCGTCCTCCGCGTGTTTATGTCGATCCGGAGTACAAGAAGATTCTCACGTTGAAGATTGAATAGAAGTAGCAGTTTAGCGATATTGACAGTATTGAATACTTAAGCGCAACCCTCAAGATCTCTCCAGGAAACTATCGTAGAAAGGTCCATGTAGCGTAGCCCTAGTGCGTAACGCTCTGGCTATAACGCCTCGGCATGGTCGTGCGAGTAATACAAGCCAGACACAGAAAGAAACAAAGTAACTGGGATACAATTGCTCAAATCGCACCATCCCTTGCCTACCCGCTGCCCTAGGGAGTACGCGCGTTTAGAAACAAACTTGAATACGCGGGCCAGAGGCGCTCCATTCTGATCTCCTAACAACGAAAGTCCCAGCACTTCCAGGACTAACGGAAAAGCTCGGACAACATGACACAGCCCTAAGGCAAGGAAAGCCCGCGTCACTCGATCGGATGGATGCGGGTCTTAAGGCGATGC
",
            str::from_utf8(stream.get_ref()).unwrap())
    }

    #[test]
    fn test_one_n(){
        let mut stream = Cursor::new(Vec::new());
        huh("test-data/random500.one_N.fna",
            "test-data/random500.random500.reads.bam",
            &mut stream);
        assert_eq!(
            ">random_sequence_length_500
ACAACTGTCCCACAGAGGAATTTCGTCCTCCGCGTGTTTATGTCGATCCGGAGTACAAGAAGATTCTCACGTTGAAGATTGAATAGAAGTAGCAGTTTAGCGATATTGACAGTATTGAATACTTAAGCGCAACCCTCAAGATCTCTCCAGGAAACTATCGTAGAAAGGTCCATGTAGCGTAGCCCTAGTGCGTAACGCTCTGGCTATAACGCCTCGGCATGGTCGTGCGAGTAATACAAGCCAGACACAGAAAGAAACAAAGTAACTGGGATACAATTGCTCAAATCGCACCATCCCTTGCCTACCCGCTGCCCTAGGGAGTACGCGCGTTTAGAAACAAACTTGAATACGCGGGCCAGAGGCGCTCCATTCTGATCTCCTAACAACGAAAGTCCCAGCACTTCCAGGACTAACGGAAAAGCTCGGACAACATGACACAGCCCTAAGGCAAGGAAAGCCCGCGTCACTCGATCGGATGGATGCGGGTCTTAAGGCGATGC
",
            str::from_utf8(stream.get_ref()).unwrap())
    }

    #[test]
    fn test_missing_at_start(){
        let mut stream = Cursor::new(Vec::new());
        huh("test-data/random500.fna",
            "test-data/random500.random500.reads.300-500.bam",
            &mut stream);
        assert_eq!(
            ">random_sequence_length_500
ACAACTGTCCCACAGAGGAATTTCGTCCTCCGCGTGTTTATGTCGATCCGGAGTACAAGAAGATTCTCACGTTGAAGATTGAATAGAAGTAGCAGTTTAGCGATATTGACAGTATTGAATACTTAAGCGCAACCCTCAAGATCTCTCCAGGAAACTATCGTAGAAAGGTCCATGTAGCGTAGCCCTAGTGCGTAACGCTCTGGCTATAACGCCTCGGCATGGTCGTGCGAGTAATACAAGCCAGACACAGAAAGAAACAAAGTAACTGGGATACAATTGCTCAAATCGCACCATCCCTTGCCTACCCGCTGCCCTAGGGAGTACGCGCGTTTAGAAACAAACTTGAATACGCGGGCCAGAGGCGCTCCATTCTGATCTCCTAACAACGAAAGTCCCAGCACTTCCAGGACTAACGGAAAAGCTCGGACAACATGACACAGCCCTAAGGCAAGGAAAGCCCGCGTCACTCGATCGGATGGATGCGGGTCTTAAGGCGATGC
",
            str::from_utf8(stream.get_ref()).unwrap())
    }

    #[test]
    fn test_three_contigs(){
        let mut stream = Cursor::new(Vec::new());
        huh("test-data/three_randoms.fna",
            "test-data/three_randoms.three_randoms.reads.bam",
            &mut stream);
        assert_eq!(
            ">random_sequence_length_400
CGACTTGAAGGCACCGCGTGGACACATTGAATCCGCCTACGGCACCAGGTCTCCTATGGCCTCAGCGGATGTCTATCCCTCCAGTGGCTTGCCATGAGCCCCCACACACCGTCCGAGGGTCGTTGGTGAACATTACACCGCTATACATAACATCGTGGGCACATTGTTTCTGCCCGTCGCAGTGTCCTGCGATGAAACTGTCCAAGAGCGAATTGAATTTGACTATAGCGTAAGTAACGGACGGTATGACGCTTAGGGGGTTTCTTGGAATGCTGATCGGTACCCCGCTCCAAGTCCAGTTATCCTATGGTTTTTGATTAGCATGGGGGCGTACTTGAGAAGCATTCTAGCATTTCACGTCAACCCGTGGTGGCTTTCCTTATCACGCGTTAGTCGCAAT
>random_sequence_length_1000
ACTAAACTGCCCCTGCATTGCAACGCGAAACGCCCTAGGCACAACACCAGGCCTTCGCAGCTGATCTACACGTGCGAAAGCTTTTTCTACAGCTCGTACGTGAGGTTCTGCACCTCCGTGGCATTAGGATTGTGCCCTCCCCGCCAGGCCCACGATAAACAACCTCGGCCACAAGTGGGTAATGTCGAGGGAGTGATAACTTCAAAAGATATGACAGCGGTACATTGAGTAAATAACGCCGATGGCCGTTTAAAGCCCACTCCGATATACCCTCGAGTAGCCGGTCAGCAAACCCTGGGATGCAGTAAAAGACAAGTGACCTAACAACGGCTTTTAAACATGCAGACCTGTAAAGAAAGACGTAGACTCCCTATTGCACAGTACTCACTGGTTCCCAATCCCCATTTTCTAATTACAATCTAAACATACGCCCCCGGCACCCCCTTCCAGAGGCGTGGGCAATTACGACAAACAGCGCTGGATACGCGGTTGAGCAATACATACGCGAAGCGAGGCCGTGGCTGGTCGCGTGGTATTACACTTTTCGATGGTAGGCAACCGCCGGATATCATACTCGATCCCCCATGAAGCATCCTGCAAGGTCCGAAAGGAGCGTGTTCTAGCATATATTTTACAGTATATCGACATATTCCGTGGAGACGCTCCTGAGACAAAGTCGATCAAGCAAGGCGAACTCCCAGCTGAGGCCGCGGTGATATCTCCTGTGTTCATGACTGCAGTAACGGACCTCAGAGACATCCGCTTCCGCGTTCGTACATGAACAGCGTTATATCACTGCCCGTGGATAGATTAGGACTGGGAAGCTTCCTTACGTTTCTGTGCAAAAAACGTGAACATTACAGAAATGTCTAGCCCGGCGCTTGTATGCCCATCCGGAGACCAGAACACCTCAGTCACACGAAGGAAGGTTACCACCGACTTTGACAGATAGTCGAAATCGGACCCCCTTTAGATGGAACAAGTACGCGTTAAAGTGTGA
>random_sequence_length_500
GTAAGCACCGTTGACGCAGCCGGCATCTCCCCCGGAAGGATAGGCGAAAGGTGTTCTGCGCCCTGAAGTAAGCGTCATCACCCGCCTACCATTTGGCTCCTGCCGCTACCACCCGCAGGCTGTCCTTCACATCGCGGGGTTCGGGCTCCCTGGTCCCACCAGTCCCCATAAAGTAGATTAAATCAGGTTGGAACAAATCAGAAACTGTGTGACATAAAATGGGCCGTCTGCTTAAGTTCCTACTCTTACTTACCTACTTACAGGGTAGGGTGTCCACAGTCAGAGTAAAGCTTTTCTATCTCCAGCGCAGTTTACGGCCTGTAAGGCATCTGAGGAGTCAGGATGTTGCTAACCCGGACTTCATATCCTACTGTTTTATCAGAGTAATCGTATTGCTGGATTCTGTGCTTGCACGATATATTGAGGGCGTGACATGCAGGGGTATGACACCATCCGCGCGAGATTATTCTGTATCCGTATCTGACCTCCGGTGTAATTTG
",
            str::from_utf8(stream.get_ref()).unwrap())
    }

    #[test]
    fn test_three_n_contigs(){
        let mut stream = Cursor::new(Vec::new());
        huh("test-data/three_randoms.some_Ns.fna",
            "test-data/three_randoms.three_randoms.reads.bam",
            &mut stream);
        // There are some Ns left here because the reads do not map all the way to the ends.
        assert_eq!(
            ">random_sequence_length_400
CGACTTGAAGGCACCGCGTGGACACATTGAATCCGCCTACGGCACCAGGTCTCCTATGGCCTCAGCGGATGTCTATCCCTCCAGTGGCTTGCCATGAGCCCCCACACACCGTCCGAGGGTCGTTGGTGAACATTACACCGCTATACATAACATCGTGGGCACATTGTTTCTGCCCGTCGCAGTGTCCTGCGATGAAACTGTCCAAGAGCGAATTGAATTTGACTATAGCGTAAGTAACGGACGGTATGACGCTTAGGGGGTTTCTTGGAATGCTGATCGGTACCCCGCTCCAAGTCCAGTTATCCTATGGTTTTTGATTAGCATGGGGGCGTACTTGAGAAGCATTCTAGCATTTCACGTCAACCCGTGGTGGCTTTCCTTATCACGCGTTAGTCGNNNN
>random_sequence_length_1000
ACTAAACTGCCCCTGCATTGCAACGCGAAACGCCCTAGGCACAACACCAGGCCTTCGCAGCTGATCTACACGTGCGAAAGCTTTTTCTACAGCTCGTACGTGAGGTTCTGCACCTCCGTGGCATTAGGATTGTGCCCTCCCCGCCAGGCCCACGATAAACAACCTCGGCCACAAGTGGGTAATGTCGAGGGAGTGATAACTTCAAAAGATATGACAGCGGTACATTGAGTAAATAACGCCGATGGCCGTTTAAAGCCCACTCCGATATACCCTCGAGTAGCCGGTCAGCAAACCCTGGGATGCAGTAAAAGACAAGTGACCTAACAACGGCTTTTAAACATGCAGACCTGTAAAGAAAGACGTAGACTCCCTATTGCACAGTACTCACTGGTTCCCAATCCCCATTTTCTAATTACAATCTAAACATACGCCCCCGGCACCCCCTTCCAGAGGCGTGGGCAATTACGACAAACAGCGCTGGATACGCGGTTGAGCAATACATACGCGAAGCGAGGCCGTGGCTGGTCGCGTGGTATTACACTTTTCGATGGTAGGCAACCGCCGGATATCATACTCGATCCCCCATGAAGCATCCTGCAAGGTCCGAAAGGAGCGTGTTCTAGCATATATTTTACAGTATATCGACATATTCCGTGGAGACGCTCCTGAGACAAAGTCGATCAAGCAAGGCGAACTCCCAGCTGAGGCCGCGGTGATATCTCCTGTGTTCATGACTGCAGTAACGGACCTCAGAGACATCCGCTTCCGCGTTCGTACATGAACAGCGTTATATCACTGCCCGTGGATAGATTAGGACTGGGAAGCTTCCTTACGTTTCTGTGCAAAAAACGTGAACATTACAGAAATGTCTAGCCCGGCGCTTGTATGCCCATCCGGAGACCAGAACACCTCAGTCACACGAAGGAAGGTTACCACCGACTTTGACAGATAGTCGAAATCGGACCCCCTTTAGATGGAACAAGTACGCGTTAAAGTGTGA
>random_sequence_length_500
NNAAGCACCGTTGACGCAGCCGGCATCTCCCCCGGAAGGATAGGCGAAAGGTGTTCTGCGCCCTGAAGTAAGCGTCATCACCCGCCTACCATTTGGCTCCTGCCGCTACCACCCGCAGGCTGTCCTTCACATCGCGGGGTTCGGGCTCCCTGGTCCCACCAGTCCCCATAAAGTAGATTAAATCAGGTTGGAACAAATCAGAAACTGTGTGACATAAAATGGGCCGTCTGCTTAAGTTCCTACTCTTACTTACCTACTTACAGGGTAGGGTGTCCACAGTCAGAGTAAAGCTTTTCTATCTCCAGCGCAGTTTACGGCCTGTAAGGCATCTGAGGAGTCAGGATGTTGCTAACCCGGACTTCATATCCTACTGTTTTATCAGAGTAATCGTATTGCTGGATTCTGTGCTTGCACGATATATTGAGGGCGTGACATGCAGGGGTATGACACCATCCGCGCGAGATTATTCTGTATCCGTATCTGACCTCCGGTGTAATTTN
",
            str::from_utf8(stream.get_ref()).unwrap())
    }

    #[test]
    fn test_missing_last_contig(){
        let mut stream = Cursor::new(Vec::new());
        huh("test-data/three_randoms.some_Ns.fna",
            "test-data/three_randoms.three_randoms.first_and_second.reads.bam",
            &mut stream);
        // There are some Ns left here because the reads do not map all the way to the ends.
        assert_eq!(
            ">random_sequence_length_400
CGACTTGAAGGCACCGCGTGGACACATTGAATCCGCCTACGGCACCAGGTCTCCTATGGCCTCAGCGGATGTCTATCCCTCCAGTGGCTTGCCATGAGCCCCCACACACCGTCCGAGGGTCGTTGGTGAACATTACACCGCTATACATAACATCGTGGGCACATTGTTTCTGCCCGTCGCAGTGTCCTGCGATGAAACTGTCCAAGAGCGAATTGAATTTGACTATAGCGTAAGTAACGGACGGTATGACGCTTAGGGGGTTTCTTGGAATGCTGATCGGTACCCCGCTCCAAGTCCAGTTATCCTATGGTTTTTGATTAGCATGGGGGCGTACTTGAGAAGCATTCTAGCATTTCACGTCAACCCGTGGTGGCTTTCCTTATCACGCGTTAGTCGNNNN
>random_sequence_length_1000
ACTAAACTGCCCCTGCATTGCAACGCGAAACGCCCTAGGCACAACACCAGGCCTTCGCAGCTGATCTACACGTGCGAAAGCTTTTTCTACAGCTCGTACGTGAGGTTCTGCACCTCCGTGGCATTAGGATTGTGCCCTCCCCGCCAGGCCCACGATAAACAACCTCGGCCACAAGTGGGTAATGTCGAGGGAGTGATAACTTCAAAAGATATGACAGCGGTACATTGAGTAAATAACGCCGATGGCCGTTTAAAGCCCACTCCGATATACCCTCGAGTAGCCGGTCAGCAAACCCTGGGATGCAGTAAAAGACAAGTGACCTAACAACGGCTTTTAAACATGCAGACCTGTAAAGAAAGACGTAGACTCCCTATTGCACAGTACTCACTGGTTCCCAATCCCCATTTTCTAATTACAATCTAAACATACGCCCCCGGCACCCCCTTCCAGAGGCGTGGGCAATTACGACAAACAGCGCTGGATACGCGGTTGAGCAATACATACGCGAAGCGAGGCCGTGGCTGGTCGCGTGGTATTACACTTTTCGATGGTAGGCAACCGCCGGATATCATACTCGATCCCCCATGAAGCATCCTGCAAGGTCCGAAAGGAGCGTGTTCTAGCATATATTTTACAGTATATCGACATATTCCGTGGAGACGCTCCTGAGACAAAGTCGATCAAGCAAGGCGAACTCCCAGCTGAGGCCGCGGTGATATCTCCTGTGTTCATGACTGCAGTAACGGACCTCAGAGACATCCGCTTCCGCGTTCGTACATGAACAGCGTTATATCACTGCCCGTGGATAGATTAGGACTGGGAAGCTTCCTTACGTTTCTGTGCAAAAAACGTGAACATTACAGAAATGTCTAGCCCGGCGCTTGTATGCCCATCCGGAGACCAGAACACCTCAGTCACACGAAGGAAGGTTACCACCGACTTTGACAGATAGTCGAAATCGGACCCCCTTTAGATGGAACAAGTACGCGTTAAAGTGTGA
>random_sequence_length_500
NNNNGCACCGTTGACGCAGCCGGCATCTCCCCCGGAAGGATAGGCGAAAGGTGTTCTGCGCCCTGAAGTAAGCGTCATCACCCGCCTACCATTTGGCTCCTGCCGCTACCACCCGCAGGCTGTCCTTCACATCGCGGGGTTCGGGCTCCCTGGTCCCACCAGTCCCCATAAAGTAGATTAAATCAGGTTGGAACAAATCAGAAACTGTGTGACATAAAATGGGCCGTCTGCTTAAGTTCCTACTCTTACTTACCTACTTACAGGGTAGGGTGTCCACAGTCAGAGTAAAGCTTTTCTATCTCCAGCGCAGTTTACGGCCTGTAAGGCATCTGAGGAGTCAGGATGTTGCTAACCCGGACTTCATATCCTACTGTTTTATCAGAGTAATCGTATTGCTGGATTCTGTGCTTGCACGATATATTGAGGGCGTGACATGCAGGGGTATGACACCATCCGCGCGAGATTATTCTGTATCCGTATCTGACCTCCGGTGTAANNNN
",
            str::from_utf8(stream.get_ref()).unwrap())
    }

    #[test]
    fn test_missing_middle_contig(){
        let mut stream = Cursor::new(Vec::new());
        huh("test-data/three_randoms.some_Ns.fna",
            "test-data/three_randoms.three_randoms.first_and_third.reads.bam",
            &mut stream);
        // There are some Ns left here because the reads do not map all the way to the ends.
        assert_eq!(
            ">random_sequence_length_400
CGACTTGAAGGCACCGCGTGGACACATTGAATCCGCCTACGGCACCAGGTCTCCTATGGCCTCAGCGGATGTCTATCCCTCCAGTGGCTTGCCATGAGCCCCCACACACCGTCCGAGGGTCGTTGGTGAACATTACACCGCTATACATAACATCGTGGGCACATTGTTTCTGCCCGTCGCAGTGTCCTGCGATGAAACTGTCCAAGAGCGAATTGAATTTGACTATAGCGTAAGTAACGGACGGTATGACGCTTAGGGGGTTTCTTGGAATGCTGATCGGTACCCCGCTCCAAGTCCAGTTATCCTATGGTTTTTGATTAGCATGGGGGCGTACTTGAGAAGCATTCTAGCATTTCACGTCAACCCGTGGTGGCTTTCCTTATCACGCGTTAGTCGNNNN
>random_sequence_length_1000
ACTAAACTGCCCCTGCATTGCAACGCGAAACGCCCTAGGCACAACACCAGGCCTTCGCAGCTGATCTACACGTGCGAAAGCTTTTTCTACAGCTCGTACGTGAGGTTCTGCACCTCCGTGGCATTAGGATTGTGCCCTCCCCGCCAGGCCCACGATAAACAACCTCGGCCACAAGTGGGTAATGTCGAGGGAGTGATAACTTCAAAAGATATGACAGCGGTACATTGAGTAAATAACGCCGATGGCCGTTTAAAGCCCACTCCGATATACCCTCGAGTAGCCGGTCAGCAAACCCTGGGATGCAGTAAAAGACAAGTGACCTAACAACGGCTTTTAAACATGCAGACCTGTAAAGAAAGACGTAGACTCCCTATTGCACAGTACTCACTGGTTCCCAATCCCCATTTTCTAATTACAATCTAAACATACGCCCCCGGCACCCCCTTCCAGAGGCGTGGGCAATTACGACAAACAGCGCTGGATACGCGGTTGAGCAATACANACGCGAAGCGAGGCCGTGGCTGGTCGCGTGGTATTANNNNTTTCGATGGTAGGCAACCGCCGGATATCATACTCGATCCCCCATGAAGCATCCTGCAAGGTCCGAAAGGAGCGTGTTCTAGCATATATTTTACAGTATATCGACATATTCCGTGGAGACGCTCCTGAGACAAAGTCGATCAAGCAAGGCGAACTCCCAGCTGAGGCCGCGGTGATATCTCCTGTGTTCATGACTGCAGTAACGGACCTCAGAGACATCCGCTTCCGCGTTCGTACATGAACAGCGTTATATCACTGCCCGTGGATAGATTAGGACTGGGAAGCTTCCTTACGTTTCTGTGCAAAAAACGTGAACATTACAGAAATGTCTAGCCCGGCGCTTGTATGCCCATCCGGAGACCAGAACACCTCAGTCACACGAAGGAAGGTTACCACCGACTTTGACAGATAGTCGAAATCGGACCCCCTTTAGATGGAACAAGTACGCGTTAAAGTGTGA
>random_sequence_length_500
NNAAGCACCGTTGACGCAGCCGGCATCTCCCCCGGAAGGATAGGCGAAAGGTGTTCTGCGCCCTGAAGTAAGCGTCATCACCCGCCTACCATTTGGCTCCTGCCGCTACCACCCGCAGGCTGTCCTTCACATCGCGGGGTTCGGGCTCCCTGGTCCCACCAGTCCCCATAAAGTAGATTAAATCAGGTTGGAACAAATCAGAAACTGTGTGACATAAAATGGGCCGTCTGCTTAAGTTCCTACTCTTACTTACCTACTTACAGGGTAGGGTGTCCACAGTCAGAGTAAAGCTTTTCTATCTCCAGCGCAGTTTACGGCCTGTAAGGCATCTGAGGAGTCAGGATGTTGCTAACCCGGACTTCATATCCTACTGTTTTATCAGAGTAATCGTATTGCTGGATTCTGTGCTTGCACGATATATTGAGGGCGTGACATGCAGGGGTATGACACCATCCGCGCGAGATTATTCTGTATCCGTATCTGACCTCCGGTGTAATTTN
",
            str::from_utf8(stream.get_ref()).unwrap())
    }

    #[test]
    fn test_missing_first_contig(){
        let mut stream = Cursor::new(Vec::new());
        huh("test-data/three_randoms.some_Ns.fna",
            "test-data/three_randoms.three_randoms.second_and_third.reads.bam",
            &mut stream);
        // There are some Ns left here because the reads do not map all the way to the ends.
        assert_eq!(
            ">random_sequence_length_400
CGACTTGAAGGCACCGCGTGGACACATTGAATCCGCCTACGGCACCAGGTCTCCTATGGCCTCAGCGGATGTCTATCCCTCCAGTGGCTTGCCATGAGCCCCCACACACCGTCCGAGGGTCGTTGGTGAACATTACACCGCTATACATAACATCGTGGGCACATTGTTTCTGCCCGTCGCAGTGTCCTGCGATGAAACTGTCCAAGAGCGAATTGAATTTGACTATAGCGTAAGTAACGGACGGTATGACGCTTAGGGGGTTTCTTGGAATGCTGATCGGTACCCCGCTCCAAGTCCAGTTATCCTATGGTTTTTGATTAGCATGGGGGCGTACTTGAGAAGCATTCTAGCATTTCACGTCAACCCGTGGTGGCTTTCCTTATCACGCGTTAGTCGNNNN
>random_sequence_length_1000
ACTAAACTGCCCCTGCATTGCAACGCGAAACGCCCTAGGCACAACACCAGGCCTTCGCAGCTGATCTACACGTGCGAAAGCTTTTTCTACAGCTCGTACGTGAGGTTCTGCACCTCCGTGGCATTAGGATTGTGCCCTCCCCGCCAGGCCCACGATAAACAACCTCGGCCACAAGTGGGTAATGTCGAGGGAGTGATAACTTCAAAAGATATGACAGCGGTACATTGAGTAAATAACGCCGATGGCCGTTTAAAGCCCACTCCGATATACCCTCGAGTAGCCGGTCAGCAAACCCTGGGATGCAGTAAAAGACAAGTGACCTAACAACGGCTTTTAAACATGCAGACCTGTAAAGAAAGACGTAGACTCCCTATTGCACAGTACTCACTGGTTCCCAATCCCCATTTTCTAATTACAATCTAAACATACGCCCCCGGCACCCCCTTCCAGAGGCGTGGGCAATTACGACAAACAGCGCTGGATACGCGGTTGAGCAATACATACGCGAAGCGAGGCCGTGGCTGGTCGCGTGGTATTACACTTTTCGATGGTAGGCAACCGCCGGATATCATACTCGATCCCCCATGAAGCATCCTGCAAGGTCCGAAAGGAGCGTGTTCTAGCATATATTTTACAGTATATCGACATATTCCGTGGAGACGCTCCTGAGACAAAGTCGATCAAGCAAGGCGAACTCCCAGCTGAGGCCGCGGTGATATCTCCTGTGTTCATGACTGCAGTAACGGACCTCAGAGACATCCGCTTCCGCGTTCGTACATGAACAGCGTTATATCACTGCCCGTGGATAGATTAGGACTGGGAAGCTTCCTTACGTTTCTGTGCAAAAAACGTGAACATTACAGAAATGTCTAGCCCGGCGCTTGTATGCCCATCCGGAGACCAGAACACCTCAGTCACACGAAGGAAGGTTACCACCGACTTTGACAGATAGTCGAAATCGGACCCCCTTTAGATGGAACAAGTACGCGTTAAAGTGTGA
>random_sequence_length_500
NNAAGCACCGTTGACGCAGCCGGCATCTCCCCCGGAAGGATAGGCGAAAGGTGTTCTGCGCCCTGAAGTAAGCGTCATCACCCGCCTACCATTTGGCTCCTGCCGCTACCACCCGCAGGCTGTCCTTCACATCGCGGGGTTCGGGCTCCCTGGTCCCACCAGTCCCCATAAAGTAGATTAAATCAGGTTGGAACAAATCAGAAACTGTGTGACATAAAATGGGCCGTCTGCTTAAGTTCCTACTCTTACTTACCTACTTACAGGGTAGGGTGTCCACAGTCAGAGTAAAGCTTTTCTATCTCCAGCGCAGTTTACGGCCTGTAAGGCATCTGAGGAGTCAGGATGTTGCTAACCCGGACTTCATATCCTACTGTTTTATCAGAGTAATCGTATTGCTGGATTCTGTGCTTGCACGATATATTGAGGGCGTGACATGCAGGGGTATGACACCATCCGCGCGAGATTATTCTGTATCCGTATCTGACCTCCGGTGTAATTTN
",
            str::from_utf8(stream.get_ref()).unwrap())
    }
}
